<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://waoap.github.io</id>
    <title>Waoap&apos;s Blog</title>
    <updated>2022-01-20T10:18:03.628Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://waoap.github.io"/>
    <link rel="self" href="https://waoap.github.io/atom.xml"/>
    <subtitle>书当快意辄阅尽，客莫可人不期来。</subtitle>
    <logo>https://waoap.github.io/images/avatar.png</logo>
    <icon>https://waoap.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Waoap&apos;s Blog</rights>
    <entry>
        <title type="html"><![CDATA[Java 运算符]]></title>
        <id>https://waoap.github.io/post/java-operator/</id>
        <link href="https://waoap.github.io/post/java-operator/">
        </link>
        <updated>2022-01-20T03:31:31.000Z</updated>
        <summary type="html"><![CDATA[<p>1、算数运算符；<br>
2、赋值运算符；<br>
3、关系运算符；<br>
4、逻辑运算符；<br>
5、三元运算符；<br>
6、位运算符；</p>
]]></summary>
        <content type="html"><![CDATA[<p>1、算数运算符；<br>
2、赋值运算符；<br>
3、关系运算符；<br>
4、逻辑运算符；<br>
5、三元运算符；<br>
6、位运算符；</p>
<!-- more -->
<p>…… ……</p>
<p>6、位运算符</p>
<ul>
<li><code>&amp;</code>（按位与）；</li>
<li><code>|</code>（按位或）；</li>
<li><code>^</code>（按位异或）；</li>
<li><code>~</code>（按位取反）；</li>
<li><code>&lt;&lt;</code>（左移，空位补 0）：<img src="https://waoap.github.io/post-images/1642649970722.png" alt="" loading="lazy"><br>
用途：用于快速实现乘法，如 4 * 8（2^3）等价于 4 &lt;&lt; 3；</li>
<li><code>&gt;&gt;</code>（有符号右移，根据符号位决定空位补充 1 还是 0）：<img src="https://waoap.github.io/post-images/1642663838331.png" alt="" loading="lazy"></li>
<li><code>&gt;&gt;&gt;</code>（无符号右移，空位补 0）：类似 <code>&gt;&gt;&gt;</code>。</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 数据类型*]]></title>
        <id>https://waoap.github.io/post/java-data-type/</id>
        <link href="https://waoap.github.io/post/java-data-type/">
        </link>
        <updated>2022-01-18T03:12:21.000Z</updated>
        <summary type="html"><![CDATA[<p>1、变量与常量；<br>
2、基本数据类型；<br>
3、类型转换；<br>
4、编码、字符集；</p>
]]></summary>
        <content type="html"><![CDATA[<p>1、变量与常量；<br>
2、基本数据类型；<br>
3、类型转换；<br>
4、编码、字符集；</p>
<!-- more -->
<h2 id="1-变量与常量">1、变量与常量</h2>
<p>常量：字面常量，如 <code>&quot;a&quot;</code> 、<code>123</code> 等；<br>
变量：如 <code>int a = 1;</code> 等，重点内容包括声明<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>、赋值、使用<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>、所处内存；</p>
<h2 id="2-数据类型">2、数据类型</h2>
<p>基本数据类型包括：整数类型、浮点数类型、字符类型、布尔类型；<br>
引用数据类型包括：类、接口、数组；</p>
<h2 id="3-类型转换">3、类型转换</h2>
<p>byte、short、char -&gt; int -&gt; long -&gt; float -&gt; double<br>
--&gt; 自动转换 || &lt;-- 强制转换</p>
<h2 id="4-编码-字符集">4、编码、字符集</h2>
<p>常见：</p>
<ul>
<li>世界：ASCII、<strong>Unicode（UTF-8为主）</strong>；</li>
<li>中国：GB2312、GBK；</li>
<li>欧洲：IOS8859-1;</li>
</ul>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>Java 是强类型语言，声明变量时必须定义类型； <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
<li id="fn2" class="footnote-item"><p>使用前必须赋值（初始化）； <a href="#fnref2" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 开发小贴士]]></title>
        <id>https://waoap.github.io/post/java-development-tips/</id>
        <link href="https://waoap.github.io/post/java-development-tips/">
        </link>
        <updated>2022-01-18T03:04:25.000Z</updated>
        <summary type="html"><![CDATA[<p>1、标识符命名规则；<br>
2、</p>
]]></summary>
        <content type="html"><![CDATA[<p>1、标识符命名规则；<br>
2、</p>
<!-- more -->
<h2 id="1-标识符命名规则">1、标识符命名规则</h2>
<ul>
<li>不可以以数字开头，不可以使用关键字；</li>
<li>命名有意义；</li>
<li>类名：首字母大写的驼峰命名法；</li>
<li>方法名、变量名：首字母小写的驼峰命名法；</li>
<li>包名：全部小写；</li>
</ul>
<h2 id="2">2、</h2>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[代码统计工具]]></title>
        <id>https://waoap.github.io/post/colc/</id>
        <link href="https://waoap.github.io/post/colc/">
        </link>
        <updated>2022-01-16T06:05:04.000Z</updated>
        <summary type="html"><![CDATA[<p>利用 github 上的开源项目 <a href="https://github.com/AlDanial/cloc">colc</a>，<br>
配合本地自制的 colc 的启动器，<br>
以此实现一键统计使用 VSCode 写出的代码的行数。</p>
]]></summary>
        <content type="html"><![CDATA[<p>利用 github 上的开源项目 <a href="https://github.com/AlDanial/cloc">colc</a>，<br>
配合本地自制的 colc 的启动器，<br>
以此实现一键统计使用 VSCode 写出的代码的行数。</p>
<!-- more -->
<h2 id="启动器源码">启动器源码</h2>
<pre><code class="language-c">#include &lt;stdio.h&gt;

// 接受 colc 输出结果的大小
#define RESULT_SIZE 8192

// 此处为命令
#define COMMAND &quot;D:\\Programs\\Cloc\\cloc.exe E:\\Projects\\VSCode\\* --exclude-dir=.vscode&quot;

// 模拟 string.h 中 strcat() 的功能
void StrCat(char *dst, char *src)
{
    while (*dst) // 等价于 *dst != '\0'，下同
        dst++;
    while (*dst++ = *src++)
        ;
}

int main()
{
    char buffer[128], result[MAX_RESULT_SIZE] = &quot;&quot;;

    // 在命令行中执行程序
    puts(&quot;Executing, please wait...&quot;);
    FILE *fp = popen(COMMAND, &quot;r&quot;);
    if (!fp)
    {
        puts(&quot;Error!\n&quot;);
        return -1;
    }

    // 获取执行产生的输出
    while (!feof(fp))
        if (fgets(buffer, 128, fp))
            StrCat(result, buffer);
    pclose(fp);

    // 输出此输出
    puts(&quot;Done!\nTotal:\n&quot;);
    puts(result);
    return 0;
}
</code></pre>
<h2 id="结果展示">结果展示</h2>
<figure data-type="image" tabindex="1"><img src="https://waoap.github.io/post-images/1642313733689.png" alt="Result" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java GC 机制]]></title>
        <id>https://waoap.github.io/post/java-gc-mechanism/</id>
        <link href="https://waoap.github.io/post/java-gc-mechanism/">
        </link>
        <updated>2021-12-28T13:20:34.000Z</updated>
        <summary type="html"><![CDATA[<p>TODO：Java GC 机制学习🚩</p>
]]></summary>
        <content type="html"><![CDATA[<p>TODO：Java GC 机制学习🚩</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 简介*]]></title>
        <id>https://waoap.github.io/post/java-introduction/</id>
        <link href="https://waoap.github.io/post/java-introduction/">
        </link>
        <updated>2021-12-26T12:04:59.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="摘要">💥 摘要</h2>
<p>本文的内容包括： Java 的发展简史 、 Java 的体系结构 、 Java 的特性与优势、<strong>Java 的核心机制</strong> 。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="摘要">💥 摘要</h2>
<p>本文的内容包括： Java 的发展简史 、 Java 的体系结构 、 Java 的特性与优势、<strong>Java 的核心机制</strong> 。</p>
<!-- more -->
<h2 id="️-java-的发展简史">🖇️ Java 的发展简史</h2>
<p>一些资料见 <a href="https://en.wikipedia.org/wiki/Java_(programming_language)">👉Java-Wikipedia</a> 以及 <a href="https://www.jetbrains.com/lp/devecosystem-2021/Java/">👉Jetbrains 对开发者生态系统的调研报告</a><br>
Java最早由 SUN 公司于 1996 年发布，然后来 SUN 公司为 Oracle 公司收购，如今我们使用的便是 Oracle Java。</p>
<h2 id="java-的体系结构">💎 Java 的体系结构</h2>
<p>Java 分为 <strong>JavaSE(Java Standard Edition)</strong> 、 <strong>JavaEE(Java Enterprise Edition)</strong> 、 <strong>JavaME(Java Micro Edition)</strong> 三个版本。</p>
<ul>
<li>
<p>JavaSE：标准版，定位于个人计算机上的应用（基础）；</p>
</li>
<li>
<p>JavaEE：企业版，定位于服务端的应用（是 SE 在数据库等方面的拓展）；</p>
</li>
<li>
<p>JavaME：微型版，定位于消费性电子产品的应用（基本不接触）。</p>
</li>
</ul>
<h2 id="java-的特性与优势">🧩 Java 的特性与优势</h2>
<ul>
<li>
<p>跨平台、可移植性 <strong>（核心优势）</strong>：如 Java 的 int 永远是 32 位，不同于 C++ 等可能因编译器不同而产生软件移植时的困难；</p>
</li>
<li>
<p>安全性：Java 适合于网络/分布式环境，在安全方面投入很多，安全性好于很容易实现操作底层系统的 C/C++ 等；</p>
</li>
<li>
<p>面向对象：适合大型软件的设计、开发；</p>
</li>
<li>
<p>简单性：因 Java 最初是基于 C/C++ 的语法进行的设计，并且去除了 C++ 里头文件、指针运算、结构、联合等等的内容，使得 Java 相对不难上手；</p>
</li>
<li>
<p>性能不错：虽然由于使用虚拟机，Java 的性能比不上 C/C++，但经过对虚拟机的优化，如 JIT 技术等，如今在某些情况下，Java 性能不输 C/C++；</p>
</li>
<li>
<p>分布式：Java 是为 Internet 的分布式环境设计的，因为它能够处理TCP/IP协议，Java 还支持远程方法调用（RMI），使程序能够通过网络调用方法；</p>
</li>
<li>
<p>多线程：Java 多线程的简单性是使之成为主流的服务器端开发语言的原因之一；</p>
</li>
<li>
<p>健壮新：Java 吸收了 C/C++ 的优点，去除了内存的申请、释放等等可能影响健壮性的机制，并使用异常处理机制来增强这一特性。</p>
</li>
</ul>
<h2 id="java-的核心机制核心优势">☕ Java 的核心机制（核心优势）</h2>
<ol>
<li>
<p>垃圾回收机制：<br>
垃圾（内存）回收的目的在于主动清除不再使用的对象等，释放内存，减少了因程序设计时没有释放空间而造成内存泄漏的情况的发生。<br>
<a href="https://www.jianshu.com/p/5261a62e4d29">👉浅谈 Java 的垃圾回收机制</a><br>
<strong>TODO：Java GC 机制的学习🚩（占坑链接：<a href="https://waoap.github.io/post/java-gc-mechanism">Java GC 机制</a>）</strong></p>
</li>
<li>
<p>跨平台实现：<br>
<strong>Java 中：</strong> 由<strong>编译器</strong>将 <strong>.java 源文件</strong>编译为 <strong>.class 字节码文件</strong>，并由适合各个平台的 <strong>JVM 虚拟机</strong>翻译成机器码而后执行。其中，正是由 <strong>JVM 虚拟机</strong>充当着翻译官的角色，将字节码文件翻译成各平台对应的可执行文件，以此实现跨平台。（注：在执行 java 程序时，表面上我们使用的是 <code>java.exe</code> 命令来调用 java.exe 程序，但实际上会在此过程中动态调用 JVM，由 JVM 将字节码一行一行地解释成当前平台适合的可执行文件的格式，因此我们认为，Java是一种 <strong>“解释型语言”</strong>）<br>
<strong>C 语言中：</strong> 由<strong>适合各个平台的编译器</strong>将 <strong>.c 源文件</strong>编译为各平台对应的可执行文件，以此实现跨平台<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。<br>
<strong>区别：</strong> Java 语言的字节码与平台无关，可以使用一份源文件编译出的一份字节码在不同平台上使用；C 语言的编译器与平台相关，编译后的可执行文件也与平台相关，并不属于真正意义上的跨平台，即便是编译前的源文件，也会受到编译器不一致带来的影响。</p>
</li>
</ol>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>严格意义上说，跨平台是指一个语言编译后产生的文件能否跨平台使用，所以 C 语言并不能做到真正意义上的跨平台。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[计算机语言发展史*]]></title>
        <id>https://waoap.github.io/post/computer-language-history/</id>
        <link href="https://waoap.github.io/post/computer-language-history/">
        </link>
        <updated>2021-12-26T10:28:49.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="介绍">🔖 介绍</h2>
<p>💧 饮水要思源，学习计算机语言则要从它的发展史了解起。<br>
🎉 计算机语言的历史主要分为<strong>机器语言</strong>、<strong>汇编语言</strong>、<strong>高级语言</strong>三个时期。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="介绍">🔖 介绍</h2>
<p>💧 饮水要思源，学习计算机语言则要从它的发展史了解起。<br>
🎉 计算机语言的历史主要分为<strong>机器语言</strong>、<strong>汇编语言</strong>、<strong>高级语言</strong>三个时期。</p>
<!-- more -->
<h2 id="发展历史">📔 发展历史</h2>
<p><img src="https://waoap.github.io/post-images/1640515364632.png" alt="computer-language-history" loading="lazy"></br><br>
计算机语言的发展经历了如上三代，其中：</p>
<ul>
<li>机器语言时期：<br>
只使用二进制 0 和 1 来编写程序， 及其复杂且容易出错，并且出错后不易排查出问题所在。</br><br>
<img src="https://waoap.github.io/post-images/1640516027011.png" alt="machine-langauge" loading="lazy"></br></li>
<li>汇编语言时期：<br>
出现了<strong>助记符（帮助记忆的符号）</strong>， 使得编程变得容易，足以胜任简单的任务。</br><br>
<img src="https://waoap.github.io/post-images/1640515829589.png" alt="assembly-language" loading="lazy"></br></li>
<li>高级语言时期：<br>
随着计算机发展，计算机领域出现了越来越多的复杂需求，仍然不算简洁易上手的汇编语言逐渐跟不上需求，于是集成汇编语言功能的更加简洁、可读性更高的高级语言应运而生。</br><br>
<img src="https://waoap.github.io/post-images/1640516580203.png" alt="high-level-language" loading="lazy"></br></li>
</ul>
<h2 id="现时期高级语言时期">🌟 现时期——高级语言时期</h2>
<p>如今，编程语言的主流是高级语言，其主要分为<strong>面向过程</strong>以及<strong>面向对象</strong>两种类型（详细见 <a href="https://waoap.github.io/post/process-and-object-oriented/">面向过程与面向对象的区别</a> <sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup> ）。从现在起，我们将开始学习当下主流高级语言之一的 <strong>Java</strong> 语言 <a href="https://waoap.github.io/post/java-introduction/">🎓点我开始 Java 之旅🎓</a>。</p>
<hr class="footnotes-sep">
<section class="footnotes">
<ol class="footnotes-list">
<li id="fn1" class="footnote-item"><p>暂时还未发布本文。 <a href="#fnref1" class="footnote-backref">↩︎</a></p>
</li>
</ol>
</section>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Vim]]></title>
        <id>https://waoap.github.io/post/vim/</id>
        <link href="https://waoap.github.io/post/vim/">
        </link>
        <updated>2021-12-26T02:14:11.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="介绍">介绍🎉</h2>
<p>Vim，程序员必备工具，一种丢掉鼠标的优雅生活方式💕。<br>
由于我个人倾向于使用 VSCode 作为生产力工具，<br>
故我将学习的 Vim 为 VSCode 中的插件版本。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="介绍">介绍🎉</h2>
<p>Vim，程序员必备工具，一种丢掉鼠标的优雅生活方式💕。<br>
由于我个人倾向于使用 VSCode 作为生产力工具，<br>
故我将学习的 Vim 为 VSCode 中的插件版本。</p>
<!-- more -->
<p>这里贴一段维基里百科里对 Vim 的介绍：</p>
<blockquote>
<p>Vim (/vɪm/; a contraction of Vi IMproved) is a free and open-source, screen-based text editor program for Unix. It is an improved clone of Bill Joy's vi.</p>
</blockquote>
<p>这里是 Vim 的 <a href="https://www.vim.org/">官网</a> 以及 <a href="https://github.com/vim/vim"> GitHub 仓库主页</a> ；<br>
这里是 Vim 的 <a href="https://github.com/VSCodeVim/Vim/">VSCode 插件版本的 GitHub 仓库主页</a>。</p>
<h2 id="使用及建议">使用及建议👻</h2>
<p><strong>使用：</strong> 在 <strong>VSCode</strong>、<strong>Visual Studio</strong>、<strong>Idea</strong> 等 IDE 中安装 Vim 插件。<br>
<strong>建议：</strong> 将以下快捷键交由 IDE 控制。<strong>（注：这部分内容将在我摸索使用 Vim 的过程中随之变更。）</strong></p>
<table>
<thead>
<tr>
<th style="text-align:center">快捷键</th>
<th style="text-align:center">作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">ctrl-a</td>
<td style="text-align:center">全选</td>
</tr>
<tr>
<td style="text-align:center">ctrl-c</td>
<td style="text-align:center">复制</td>
</tr>
<tr>
<td style="text-align:center">ctrl-x</td>
<td style="text-align:center">剪切</td>
</tr>
<tr>
<td style="text-align:center">ctrl-v</td>
<td style="text-align:center">粘贴</td>
</tr>
<tr>
<td style="text-align:center">ctrl-n</td>
<td style="text-align:center">新建文件</td>
</tr>
<tr>
<td style="text-align:center">ctrl-o</td>
<td style="text-align:center">打开文件</td>
</tr>
<tr>
<td style="text-align:center">ctrl-f</td>
<td style="text-align:center">查找</td>
</tr>
<tr>
<td style="text-align:center">ctrl-r / ctrl-h</td>
<td style="text-align:center">替换</td>
</tr>
</tbody>
</table>
<h2 id="学习计划vscode-vim">学习计划：VSCode + Vim📚</h2>
<ol>
<li>
<p>通过观看 <a href="https://www.bilibili.com/video/BV1z541177Jy">VSCode + Vim 的教程视频</a> 以及阅读 <a href="https://github.com/VSCodeVim/Vim/">VSCode Vim 插件的 README 文档</a> 来了解、学习 VSCode 中 Vim 插件的使用，并做好笔记。</p>
</li>
<li>
<p>在任何时候都尝试使用 Vim 来操作，提升自己操作的熟练度。（多敲代码，不仅能提升编程的实操能力，还能熟悉 Vim，岂不美哉！😍😘）</p>
</li>
</ol>
<h2 id="重点知识">重点知识 😝</h2>
<ol>
<li>三种模式；</li>
<li>光标移动；</li>
<li>动作（motion）；</li>
<li>操作符（operator）；</li>
<li>vim-easymotion；</li>
<li>vim-surround；</li>
<li>vim-sneak;</li>
<li>小技巧（tricks）;</li>
<li>多光标模式；</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://waoap.github.io/post/hello-gridea/</id>
        <link href="https://waoap.github.io/post/hello-gridea/">
        </link>
        <updated>2021-12-25T07:13:27.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="介绍">介绍👇</h2>
<p>👏  欢迎来到 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong>， 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... 我将用它来记录自己的学习、成长以及期间的思考、感悟等等，而这也是我第一次尝试建立自己的博客！</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="介绍">介绍👇</h2>
<p>👏  欢迎来到 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong>， 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ... 我将用它来记录自己的学习、成长以及期间的思考、感悟等等，而这也是我第一次尝试建立自己的博客！</p>
<!-- more -->
<p>这里是 Gridea 的链接：</p>
<ol>
<li>
<p><a href="https://github.com/getgridea/gridea">Github</a></p>
</li>
<li>
<p><a href="https://gridea.dev/">Gridea 主页</a></p>
</li>
<li>
<p><a href="http://fehey.com/">示例网站</a></p>
</li>
</ol>
<h2 id="特性">特性👇</h2>
<ul>
<li>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
</li>
<li>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
</li>
<li>
<p>🏷️ 你可以对文章进行标签分组</p>
</li>
<li>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
</li>
<li>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
</li>
<li>
<p>🌎  你可以使用 <strong>Github Pages</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
</li>
<li>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
</li>
<li>
<p>🇬🇧  你可以使用 <strong>中文简体</strong> 或 <strong>英语</strong></p>
</li>
<li>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
</li>
<li>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
</li>
<li>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
</li>
</ul>
<p>未来，它一定会成为你我离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>